// Code generated by MockGen. DO NOT EDIT.
// Source: services/wallet/wallet.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/IlnurShafikov/wallet/models"
	gomock "github.com/golang/mock/gomock"
)

// MockwalletRepository is a mock of walletRepository interface.
type MockwalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockwalletRepositoryMockRecorder
}

// MockwalletRepositoryMockRecorder is the mock recorder for MockwalletRepository.
type MockwalletRepositoryMockRecorder struct {
	mock *MockwalletRepository
}

// NewMockwalletRepository creates a new mock instance.
func NewMockwalletRepository(ctrl *gomock.Controller) *MockwalletRepository {
	mock := &MockwalletRepository{ctrl: ctrl}
	mock.recorder = &MockwalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwalletRepository) EXPECT() *MockwalletRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockwalletRepository) Create(arg0 context.Context, arg1 models.UserID, arg2 models.Balance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockwalletRepositoryMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockwalletRepository)(nil).Create), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockwalletRepository) Get(arg0 context.Context, arg1 models.UserID) (models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockwalletRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockwalletRepository)(nil).Get), arg0, arg1)
}

// Update mocks base method.
func (m *MockwalletRepository) Update(arg0 context.Context, arg1 models.UserID, arg2 models.Amount) (models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockwalletRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockwalletRepository)(nil).Update), arg0, arg1, arg2)
}

// MocktransactionRepository is a mock of transactionRepository interface.
type MocktransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionRepositoryMockRecorder
}

// MocktransactionRepositoryMockRecorder is the mock recorder for MocktransactionRepository.
type MocktransactionRepositoryMockRecorder struct {
	mock *MocktransactionRepository
}

// NewMocktransactionRepository creates a new mock instance.
func NewMocktransactionRepository(ctrl *gomock.Controller) *MocktransactionRepository {
	mock := &MocktransactionRepository{ctrl: ctrl}
	mock.recorder = &MocktransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionRepository) EXPECT() *MocktransactionRepositoryMockRecorder {
	return m.recorder
}

// CreateBet mocks base method.
func (m *MocktransactionRepository) CreateBet(arg0 context.Context, arg1 models.RoundID, arg2 models.Round) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBet indicates an expected call of CreateBet.
func (mr *MocktransactionRepositoryMockRecorder) CreateBet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBet", reflect.TypeOf((*MocktransactionRepository)(nil).CreateBet), arg0, arg1, arg2)
}

// GetRound mocks base method.
func (m *MocktransactionRepository) GetRound(arg0 context.Context, arg1 models.RoundID) (*models.Round, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRound", arg0, arg1)
	ret0, _ := ret[0].(*models.Round)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRound indicates an expected call of GetRound.
func (mr *MocktransactionRepositoryMockRecorder) GetRound(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRound", reflect.TypeOf((*MocktransactionRepository)(nil).GetRound), arg0, arg1)
}

// SetWin mocks base method.
func (m *MocktransactionRepository) SetWin(arg0 context.Context, arg1 models.RoundID, arg2 models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWin", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWin indicates an expected call of SetWin.
func (mr *MocktransactionRepositoryMockRecorder) SetWin(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWin", reflect.TypeOf((*MocktransactionRepository)(nil).SetWin), arg0, arg1, arg2)
}

// UpdateRound mocks base method.
func (m *MocktransactionRepository) UpdateRound(arg0 context.Context, arg1 models.RoundID, arg2 models.Round) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRound", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRound indicates an expected call of UpdateRound.
func (mr *MocktransactionRepositoryMockRecorder) UpdateRound(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRound", reflect.TypeOf((*MocktransactionRepository)(nil).UpdateRound), arg0, arg1, arg2)
}
